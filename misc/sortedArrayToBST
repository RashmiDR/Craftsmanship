/**

Given an array where elements are sorted in ascending order,
 convert it to a height balanced BST.
 
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode *sortedArrayToBST(vector<int> &num) {
        // Start typing your C/C++ solution below

        if(num.size() == 0)
            return NULL;
            
        TreeNode* root = constructBST(num, 0, num.size()-1);
        return root;

    }
    
    TreeNode* constructBST(vector<int>&num, int startIndex, int endIndex)
    {
        if(startIndex > endIndex)
            return NULL;
        
       
        int mid = (startIndex + endIndex)/2;

        TreeNode*  root = new TreeNode(num[mid]);

        root->left = constructBST(num, startIndex, mid - 1);
        root->right = constructBST(num, mid+1, endIndex);

        return root;
    }
};